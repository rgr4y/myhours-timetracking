generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "darwin-arm64"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Client {
  id          Int         @id @default(autoincrement())
  name        String
  email       String?
  hourlyRate  Float       @default(0) @map("hourly_rate")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  invoices    Invoice[]
  projects    Project[]
  timeEntries TimeEntry[]

  @@map("clients")
}

model Project {
  id          Int         @id @default(autoincrement())
  name        String
  clientId    Int         @map("client_id")
  hourlyRate  Float?      @map("hourly_rate")
  isDefault   Boolean     @default(false) @map("is_default")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  client      Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  tasks       Task[]
  timeEntries TimeEntry[]

  @@map("projects")
}

model Task {
  id          Int         @id @default(autoincrement())
  name        String
  projectId   Int         @map("project_id")
  description String?
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  timeEntries TimeEntry[]

  @@map("tasks")
}

model TimeEntry {
  id          Int       @id @default(autoincrement())
  clientId    Int?      @map("client_id")
  projectId   Int?      @map("project_id")
  taskId      Int?      @map("task_id")
  description String?
  startTime   DateTime  @map("start_time")
  endTime     DateTime? @map("end_time")
  duration    Int       @default(0)
  isActive    Boolean   @default(false) @map("is_active")
  isInvoiced  Boolean   @default(false) @map("is_invoiced")
  invoiceId   Int?      @map("invoice_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  invoice     Invoice?  @relation(fields: [invoiceId], references: [id])
  task        Task?     @relation(fields: [taskId], references: [id])
  project     Project?  @relation(fields: [projectId], references: [id])
  client      Client?   @relation(fields: [clientId], references: [id])

  @@map("time_entries")
}

model Invoice {
  id            Int         @id @default(autoincrement())
  invoiceNumber String      @map("invoice_number")
  clientId      Int         @map("client_id")
  totalAmount   Float       @map("total_amount")
  status        String      @default("draft")
  dueDate       DateTime?   @map("due_date")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  periodEnd     String?     @map("period_end")
  periodStart   String?     @map("period_start")
  data          String?     @default("{}")
  client        Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  timeEntries   TimeEntry[]

  @@map("invoices")
}

model Setting {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String

  @@map("settings")
}
